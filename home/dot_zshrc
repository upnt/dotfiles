# load functions
fpath+="$HOME/.zsh_functions"

# load envs
if [[ -d "$PYENV_ROOT" ]]; then
    fpath+="$PYENV_ROOT/completions"
    function plenv() {
        unfunction "$0"
        eval "$(pyenv init -)"
	    eval "$(pyenv virtualenv-init -)"
        $0 "$@"
    }
fi

if [[ -d "$NODENV_ROOT" ]]; then
    fpath+="$NODENV_ROOT/completions"
    function plenv() {
        unfunction "$0"
        eval "$(nodenv init - zsh)"
        $0 "$@"
    }
fi

if [[ -d "$RBENV_ROOT" ]]; then
    fpath+="$RBENV_ROOT/completions"
    function plenv() {
        unfunction "$0"
        eval "$(rbenv init -)"
        $0 "$@"
    }
fi

if [[ -d "$LUAENV_ROOT" ]]; then
    fpath+="$LUAENV_ROOT/completions"
    function plenv() {
        unfunction "$0"
        eval "$(luaenv init -)"
        $0 "$@"
    }
fi

if [[ -d "$JENV_ROOT" ]]; then
    fpath+="$JENV_ROOT/completions"
    function jenv() {
        unfunction "$0"
        eval "$(jenv init -)"
        jenv enable-plugin export
        $0 "$@"
    }
fi

if [[ -d "$PLENV_ROOT" ]]; then
    function plenv() {
        unfunction "$0"
        eval "$(plenv init -)"
        $0 "$@"
    }
fi

# Set up the prompt
autoload -Uz promptinit
promptinit
prompt adam1

setopt histignorealldups sharehistory

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit
local now=$(date +"%s")
local updated=$(date -r ~/.zcompdump +"%s")
local threshold=$((60 * 60 * 24))
if [ $((${now} - ${updated})) -gt ${threshold} ]; then
    compinit
else
    compinit -C
fi

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

prompt_precmd() {
    PROMPT="$HEADER"$'\n'"$PNAME"
}

chpwd() {
    local name_color=$'\e[36m'
    local branch_color=$'\e[31m'
    local reset=$'\e[m'
    
    local branch="$(git branch --show-current 2> /dev/null)"
    PNAME="%B%{${name_color}%}%~%{${reset}%}%b"
    if [ -n "$branch" ]; then
       PNAME+=" on %B%{${branch_color}%}"
       PNAME+=$'\ue725'
       PNAME+=" ${branch}%{${reset}%}%b"
    fi
    PNAME+=$'\n'"%B"$'\u232A'"%b"
    export PNAME
}

autoload -Uz add-zsh-hook
add-zsh-hook precmd prompt_precmd
add-zsh-hook chpwd chpwd

chpwd
if [ -n "$VIRTUAL_ENV_PROMPT" ]; then
    HEADER="%B%{${green}%}${VIRTUAL_ENV_PROMPT}%{${reset}%}%b"
else
    HEADER=""
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias lt='ls --tree'
    alias rls='ls --color=auto | shuf | head -n 1'
    alias rcd='cd $(ls --color=never | shuf | head -n 1)'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# alias
# update exit function
function confirm_exit() {
  local last_status=$?
  local last_pane=false
  if [[ -n $TMUX ]]; then
    if [ "$(tmux list-windows | wc -l)" -eq 1 ]; then
      if [ "$(tmux list-panes | wc -l)" -eq 1 ]; then
        last_pane=true
      fi
    fi
  fi
  
  if "${last_pane}"; then
    echo -n "セッションを終了しますか？(y/N): "
    read answer
    if [[ "$answer" == "y" ]]; then
      builtin exit $last_status
    fi
  else
      builtin exit $last_status
  fi
}

alias exit=confirm_exit

if type "bat" > /dev/null 2>&1; then
    alias cat='bat'
fi
if type "rg" > /dev/null 2>&1; then
    alias grep='rg'
fi
if type "fd" > /dev/null 2>&1; then
    alias find='fd'
fi
if type "lsd" > /dev/null 2>&1; then
    alias ls='lsd -l --blocks "git,user,group,name"'
    alias la='ls -A'
    alias ll='lsd -alF'
else
    alias ll='ls -alF'
    alias la='ls -A'
fi

if type "zoxide" > /dev/null 2>&1; then
    eval "$(zoxide init zsh)"
    alias cd="z"
fi

if [[ -d "$HOME/.fzf" ]]; then
    function fzf() {
        unfunction "$0"
    	source <(fzf --zsh)
        alias fzf="$HOME/.fzf/bin/fzf-tmux -p 90%"
        $0 "$@"
    }

    autoload -Uz gclone
    autoload -Uz git-uploaded
    autoload -Uz ftm
    autoload -Uz fcm
    autoload -Uz fdiff
fi

# config
# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

[[ -f "$HOME/.local/.zshrc" ]] && source "$HOME/.local/.zshrc"
# zprof
