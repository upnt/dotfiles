# Set up the prompt
autoload -Uz promptinit
promptinit
prompt adam1

setopt histignorealldups sharehistory

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit
compinit

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

prompt_precmd() {
    local red=$'\e[31m' green=$'\e[32m' yellow=$'\e[33m'
    local blue=$'\e[34m' magenta=$'\e[35m'
    local cyan=$'\e[36m' reset=$'\e[m'
    local branch_icon=$'\ue725'
    local branch="$(git branch --show-current 2> /dev/null)"
    PROMPT=$'\n'
    if [ -n "$VIRTUAL_ENV_PROMPT" ]; then
        PROMPT+="%B%{${green}%}${VIRTUAL_ENV_PROMPT}%{${reset}%}%b"$'\n'
    fi
    PROMPT+="%B%{${cyan}%}%~%{${reset}%}%b"
    if [ -n "$branch" ]; then
        PROMPT+=" on %B%{${red}%}${branch_icon} ${branch}%{${reset}%}%b"
    fi
    PROMPT+=$'\n'"%B"$'\u232A'"%b"
}

autoload -Uz add-zsh-hook
add-zsh-hook precmd prompt_precmd

export PATH="/opt/nvim-linux64/bin:$PATH"

if [[ -d ~/.asdf ]]; then
    source "$HOME/.asdf/asdf.sh"
    fpath=(${ASDF_DIR}/completions $fpath)
    autoload -Uz compinit && compinit
    if [[ -d ~/.asdf/plugins/java ]]; then
        . ~/.asdf/plugins/java/set-java-home.zsh
        {{- if eq .chezmoi.os "linux" }}
        {{-   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
        export PATH="$PATH:$HOME/.asdf/installs/java/openjdk-21/bin"
        {{-   end }}
        {{- end }}
    fi
    if [[ -d ~/.asdf/plugins/golang ]]; then
        . ~/.asdf/plugins/golang/set-env.zsh
    fi
    if [[ -d ~/.asdf/plugins/python ]]; then
        export PYENV_ROOT="$HOME/.asdf/plugins/python/pyenv"
        export PATH="$PATH:$PYENV_ROOT/bin"
    fi
    {{- if eq .chezmoi.os "linux" }}
    {{-   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
    if [[ -d ~/.asdf/installs/rust/1.80.1 ]]; then
        export PATH="$PATH:$HOME/.asdf/installs/rust/1.80.1/bin"
    fi
    {{-   end }}
    {{- end }}
fi

if [[ -d ~/.llvm-project ]] then
    export PATH="${PATH}:${HOME}/.llvm-project/build/bin"
fi

if [[ -d /opt/gurobi1100 ]] then
    export GUROBI_HOME="/opt/gurobi1100/linux64"
    export PATH="${PATH}:${GUROBI_HOME}/bin"
    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${GUROBI_HOME}/lib"
fi

if [[ -d /opt/gurobi1103 ]] then
    export GUROBI_HOME="/opt/gurobi1103/linux64"
    export PATH="${PATH}:${GUROBI_HOME}/bin"
    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${GUROBI_HOME}/lib"
fi

if [[ -d /opt/cisco ]] then
    export PATH="${PATH}:/opt/cisco/secureclient/bin"
    export PATH="${PATH}:/opt/cisco/hostscan/bin/"
    export PATH="${PATH}:/opt/cisco/anyconnect/securefirewallposture/ac_hostscan/bin"
    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/cisco/secureclient/lib"
    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/cisco/hostscan/lib"
    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/cisco/anyconnect/securefirewallposture/ac_hostscan/lib"
fi

if [[ -d /usr/local/texlive/2023 ]]; then
    export PATH=$PATH:/usr/local/texlive/2023/bin/x86_64-linux
    export MANPATH=$MANPATH:/usr/local/texlive/2023/texmf-dist/doc/man
    export INFOPATH=$INFOPATH:/usr/local/texlive/2023/texmf-dist/doc/info
fi

if [[ -d /usr/local/texlive/2024 ]]; then
    export PATH=$PATH:/usr/local/texlive/2024/bin/x86_64-linux
    export MANPATH=$MANPATH:/usr/local/texlive/2024/texmf-dist/doc/man
    export INFOPATH=$INFOPATH:/usr/local/texlive/2024/texmf-dist/doc/info
fi

export GHQ_ROOT="$HOME/workspace"

export PATH=$PATH:~/.local/bin

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias lt='ls --tree'
    alias rls='ls --color=auto | shuf | head -n 1'
    alias rcd='cd $(ls --color=never | shuf | head -n 1)'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

if type "bat" > /dev/null 2>&1; then
    alias cat='bat'
fi
if type "rg" > /dev/null 2>&1; then
    alias grep='rg'
fi
if type "fd" > /dev/null 2>&1; then
    alias find='fd'
fi
if type "lsd" > /dev/null 2>&1; then
    alias ls='lsd -l --blocks "git,user,group,name"'
    alias la='ls -A'
    alias ll='lsd -alF'
else
    alias ll='ls -alF'
    alias la='ls -A'
fi

if type "zoxide" > /dev/null 2>&1; then
    eval "$(zoxide init zsh)"
    alias cd="z"
fi

if type "fzf-tmux -p" > /dev/null 2>&1; then
    alias fzf="fzf-tmux -p 90%"
fi
if type "fzf" > /dev/null 2>&1; then
    function fe {
        local file=`find . -t f -p --hidden --exclude=".git/" --color=always |
        sed -e 's#\\\\#/#g' |
        fzf --ansi --reverse --preview 'bat --color=always {}' --preview-window=up:60%`
        if [ -n "$file" ]; then
            $EDITOR $file
        fi
    }

    function fdiff {
        local file=`find . -t f -p --hidden --color=always --exclude=".git/" |
        sed -e 's#\\\\#/#g' |
        fzf --ansi --reverse --preview "git diff $@ {}" --preview-window=up:60%`
        if [ -n "$file" ]; then
            git diff $@ $file
        fi
    }

    function gclone {
        local repos=`gh repo list --json "nameWithOwner" | jq -r '.[]["nameWithOwner"]'`
        if [ "$1" = "-a" ] || [ "$1" = "--all" ]; then
            for i in `gh org list`
            do
                local buf=`gh repo list $i --json "nameWithOwner" | jq -r '.[]["nameWithOwner"]'`
                if [ ! "$buf" = "" ]; then
                    repos="${repos}\n${buf}"
                fi
            done
        fi
        local repo=`echo $repos | fzf --ansi --reverse | cut -f 1`
        if [ ! "$repo" = "" ]; then
            gh repo clone "$repo" $@
        fi
        echo $repo
    }

    alias ftm=ghux
fi

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

export LESS='-R'
export EDITOR=nvim

fpath+=~/.zsh_functions
while read -d $'\0' file; do
    source "${file}"
done < <(/usr/bin/find ~/.zsh_plugins -mindepth 1 -maxdepth 1 -print0)

autoload -Uz compinit && compinit

function confirm_exit() {
  local last_status=$?
  local last_pane=false
  if [[ -n $TMUX ]]; then
    if [ "$(tmux list-windows | wc -l)" -eq 1 ]; then
      if [ "$(tmux list-panes | wc -l)" -eq 1 ]; then
        last_pane=true
      fi
    fi
  fi
  
  if "${last_pane}"; then
    echo -n "セッションを終了しますか？(y/N): "
    read answer
    if [[ "$answer" == "y" ]]; then
      builtin exit $last_status
    fi
  else
      builtin exit $last_status
  fi
}

alias exit=confirm_exit
