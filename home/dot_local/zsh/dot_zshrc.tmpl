#!/bin/zsh

# load functions
fpath+="$ZDOTDIR/.zsh_functions"

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit

local now=$(date +"%s")
local updated=$(date -r ~/.zcompdump +"%s")
local threshold=$((60 * 60 * 24))
if [ $((${now} - ${updated})) -gt ${threshold} ]; then
    echo "Create ~/.zcompdump"
    compinit
else
    compinit -C
fi

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias rcd='cd $(ls --color=never | shuf | head -n 1)'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# load envs
if [[ -d "$PYENV_ROOT" ]]; then
    fpath+="$PYENV_ROOT/completions"
    
    # eval "$(pyenv init -)"
    {{ output "pyenv" "init" "-" | trim }}
    
	# eval "$(pyenv virtualenv-init -)"
	{{ output "pyenv" "virtualenv-init" "-" | trim }}
	
	eval "$(pip completion --zsh)"
fi

if [[ -d "$NODENV_ROOT" ]]; then
    fpath+="$NODENV_ROOT/completions"
    # eval "$(nodenv init - zsh)"
    {{ output "nodenv" "init" "-" "zsh" }}
fi

if [[ -d "$RBENV_ROOT" ]]; then
    fpath+="$RBENV_ROOT/completions"
    # eval "$(rbenv init -)"
    {{ output "rbenv" "init" "-" }}
fi

if [[ -d "$LUAENV_ROOT" ]]; then
    fpath+="$LUAENV_ROOT/completions"
    # eval "$(luaenv init -)"
    {{ output "luaenv" "init" "-" }}
fi

if [[ -d "$JENV_ROOT" ]]; then
    fpath+="$JENV_ROOT/completions"
    function _jenv_init() {
        # eval "$(jenv init -)"
        {{ output "jenv" "init" "-" }}
        jenv enable-plugin export
    }
    function jenv() {
        unset -f jenv
        _jenv_init
        jenv "$@"
    }
    function java() {
        unset -f java
        _jenv_init
        java "$@"
    }
fi

if [[ -d "$PLENV_ROOT" ]]; then
    # eval "$(plenv init -)"
    {{ output "plenv" "init" "-" }}
fi

# eval "$(direnv hook zsh)"
{{ output "direnv" "hook" "zsh" }}


setopt histignorealldups sharehistory

# alias
function confirm_exit() {
  local last_status=$?
  local last_pane=false
  if [[ -n $TMUX ]]; then
    if [ "$(tmux list-windows | wc -l)" -eq 1 ]; then
      if [ "$(tmux list-panes | wc -l)" -eq 1 ]; then
        last_pane=true
      fi
    fi
  fi
  
  if "${last_pane}"; then
    echo -n "セッションを終了しますか？(y/N): "
    read answer
    if [[ "$answer" == "y" ]]; then
      builtin exit $last_status
    fi
  else
      builtin exit $last_status
  fi
}

alias exit=confirm_exit

if type "bat" > /dev/null 2>&1; then
    alias cat='bat'
fi
if type "rg" > /dev/null 2>&1; then
    alias grep='rg'
fi
if type "lsd" > /dev/null 2>&1; then
    alias ls='lsd -l --blocks "git,user,group,name"'
    alias la='ls -A'
    alias ll='lsd -alF'
    alias lt='ls --tree'
    alias rls='ls | shuf | head -n 1'
else
    alias ll='ls -alF'
    alias la='ls -A'
    alias lt='ls --tree'
    alias rls='ls | shuf | head -n 1'
fi

if type "zoxide" > /dev/null 2>&1; then
    # eval "$(zoxide init zsh)"
    {{ output "zoxide" "init" "zsh" }}
fi

if [[ -d "$HOME/.fzf" ]]; then
    function fzf() {
        unfunction "$0"
    	source <(fzf --zsh)
        alias fzf="$HOME/.fzf/bin/fzf-tmux -p 90%"
        $0 "$@"
    }

    autoload -Uz gclone
    autoload -Uz git-uploaded
    autoload -Uz ftm
    autoload -Uz fcm
    autoload -Uz fdiff
fi

# config
# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

zinit ice compile'(pure|async).zsh' pick'async.zsh' src'pure.zsh'

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light sindresorhus/pure

zinit wait lucid for \
 atinit"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
    zdharma-continuum/fast-syntax-highlighting \
 blockf \
    zsh-users/zsh-completions \
 atload"!_zsh_autosuggest_start" \
    zsh-users/zsh-autosuggestions
    
### End of Zinit's installer chunk
[[ -f "$HOME/.local/zsh_local/.zshrc" ]] && source "$HOME/.local/zsh_local/.zshrc"

# zprof
